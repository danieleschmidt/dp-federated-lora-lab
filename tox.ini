# Tox configuration for dp-federated-lora-lab
# Multi-environment testing for comprehensive validation

[tox]
# Supported Python versions
envlist = 
    py{39,310,311}
    py{39,310,311}-torch{20,21}
    privacy-py{310,311}
    federated-py{310,311}
    security
    docs
    lint
    type
    coverage
    benchmark
minversion = 4.0
isolated_build = True

# Default test environment
[testenv]
# Base configuration for all test environments
deps = 
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-xdist>=3.3.0
    pytest-mock>=3.11.0
    pytest-timeout>=2.1.0
    pytest-benchmark>=4.0.0
    pytest-asyncio>=0.21.0

# Install package in development mode
usedevelop = True

# Environment variables
setenv =
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    PIP_DISABLE_PIP_VERSION_CHECK = 1
    PIP_NO_CACHE_DIR = 1

# Change directory to avoid import issues
changedir = {toxworkdir}

# Basic test command
commands = 
    pytest {toxinidir}/tests {posargs:-v --tb=short}

# Parallel execution (comment out if you have resource constraints)
parallel_show_output = True

# Python version specific environments
[testenv:py39]
basepython = python3.9
deps = 
    {[testenv]deps}
    torch==2.0.1
    transformers>=4.30.0,<4.35.0

[testenv:py310]
basepython = python3.10
deps = 
    {[testenv]deps}
    torch>=2.1.0
    transformers>=4.35.0

[testenv:py311]
basepython = python3.11
deps = 
    {[testenv]deps}
    torch>=2.1.0
    transformers>=4.35.0

# PyTorch version matrix testing
[testenv:py{39,310,311}-torch20]
deps = 
    {[testenv]deps}
    torch>=2.0.0,<2.1.0
    torchvision>=0.15.0,<0.16.0
    torchaudio>=2.0.0,<2.1.0

[testenv:py{39,310,311}-torch21]
deps = 
    {[testenv]deps}
    torch>=2.1.0,<2.2.0
    torchvision>=0.16.0,<0.17.0
    torchaudio>=2.1.0,<2.2.0

# Privacy-focused testing environment
[testenv:privacy-py{310,311}]
deps = 
    {[testenv]deps}
    opacus>=1.4.0
    cryptography>=41.0.0
    scipy>=1.10.0
    
commands = 
    pytest {toxinidir}/tests -v \
        -m "privacy or differential_privacy" \
        --cov=src/dp_federated_lora/privacy \
        --cov=src/dp_federated_lora/mechanisms \
        --cov=src/dp_federated_lora/accountant \
        --cov-report=term-missing \
        --cov-report=xml:coverage-privacy.xml \
        --cov-fail-under=90 \
        {posargs}

# Federated learning specific testing
[testenv:federated-py{310,311}]
deps = 
    {[testenv]deps}
    peft>=0.4.0
    accelerate>=0.20.0
    
commands = 
    pytest {toxinidir}/tests -v \
        -m "federated or distributed" \
        --cov=src/dp_federated_lora/federated \
        --cov=src/dp_federated_lora/client \
        --cov=src/dp_federated_lora/server \
        --cov-report=term-missing \
        --cov-report=xml:coverage-federated.xml \
        --cov-fail-under=80 \
        {posargs}

# Security testing environment
[testenv:security]
deps = 
    bandit[toml]>=1.7.5
    safety>=2.3.0
    pip-audit>=2.6.0
    semgrep>=1.45.0
    
commands = 
    # Static security analysis
    bandit -r src/ -f json -o {toxworkdir}/bandit-report.json
    bandit -r src/ --severity-level medium --confidence-level medium
    
    # Dependency vulnerability scanning
    safety check --json --output {toxworkdir}/safety-report.json
    safety check --short-report
    
    # Audit pip packages
    pip-audit --format=json --output={toxworkdir}/pip-audit-report.json
    pip-audit --desc
    
    # Semgrep security rules (if available)
    - semgrep --config=auto --json --output={toxworkdir}/semgrep-report.json src/

# Documentation building
[testenv:docs]
deps = 
    sphinx>=7.1.0
    sphinx-rtd-theme>=1.3.0
    myst-parser>=2.0.0
    sphinx-autodoc-typehints>=1.24.0
    
changedir = {toxinidir}/docs
commands = 
    sphinx-build -W -b html . _build/html
    sphinx-build -W -b linkcheck . _build/linkcheck

# Linting environment
[testenv:lint]
deps = 
    flake8>=6.0.0
    flake8-docstrings>=1.7.0
    flake8-import-order>=0.18.0
    flake8-bugbear>=23.0.0
    ruff>=0.1.0
    black>=23.7.0
    isort>=5.12.0
    
commands = 
    # Format check
    black --check --diff src/ tests/
    isort --check-only --diff src/ tests/
    
    # Linting
    flake8 src/ tests/
    ruff check src/ tests/
    
    # Import sorting
    isort --check-only src/ tests/

# Type checking environment
[testenv:type]
deps = 
    mypy>=1.5.0
    types-requests
    types-PyYAML
    types-redis
    types-setuptools
    
commands = 
    mypy src/ --install-types --non-interactive
    mypy tests/ --install-types --non-interactive --ignore-missing-imports

# Coverage reporting environment
[testenv:coverage]
deps = 
    {[testenv]deps}
    coverage[toml]>=7.3.0
    coverage-conditional-plugin>=0.7.0
    
commands = 
    # Run tests with coverage
    coverage run -m pytest {toxinidir}/tests {posargs:-v}
    
    # Generate reports
    coverage report --show-missing --fail-under=85
    coverage html --directory={toxworkdir}/htmlcov
    coverage xml --output={toxworkdir}/coverage.xml
    coverage json --output={toxworkdir}/coverage.json

# Performance benchmarking
[testenv:benchmark]
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    memory-profiler>=0.61.0
    psutil>=5.9.0
    
setenv = 
    {[testenv]setenv}
    BENCHMARK_DISABLE_GC = 1
    
commands = 
    pytest {toxinidir}/tests -v \
        -m "benchmark or performance" \
        --benchmark-only \
        --benchmark-json={toxworkdir}/benchmark-results.json \
        --benchmark-histogram={toxworkdir}/benchmark-histogram \
        {posargs}

# Integration testing environment
[testenv:integration]
deps = 
    {[testenv]deps}
    docker>=6.0.0
    requests>=2.31.0
    
setenv = 
    {[testenv]setenv}
    INTEGRATION_TESTS = 1
    
commands = 
    pytest {toxinidir}/tests -v \
        -m "integration" \
        --timeout=300 \
        {posargs}

# End-to-end testing
[testenv:e2e]
deps = 
    {[testenv]deps}
    selenium>=4.0.0
    playwright>=1.40.0
    
commands = 
    pytest {toxinidir}/tests -v \
        -m "e2e" \
        --timeout=600 \
        {posargs}

# Mutation testing (requires mutmut)
[testenv:mutation]
deps = 
    {[testenv]deps}
    mutmut>=2.4.0
    
commands = 
    mutmut run --paths-to-mutate=src/dp_federated_lora/
    mutmut html --directory={toxworkdir}/mutmut-html

# Clean environment (removes cache and temporary files)
[testenv:clean]
deps = 
skip_install = True
commands = 
    python -c "
    import shutil
    import pathlib
    
    # Directories to clean
    clean_dirs = [
        '.pytest_cache',
        '.mypy_cache',
        '.ruff_cache',
        'htmlcov',
        'build',
        'dist',
        '*.egg-info',
        '__pycache__'
    ]
    
    # Clean each directory
    for pattern in clean_dirs:
        for path in pathlib.Path('.').glob(f'**/{pattern}'):
            if path.is_dir():
                print(f'Removing directory: {path}')
                shutil.rmtree(path, ignore_errors=True)
            elif path.is_file():
                print(f'Removing file: {path}')
                path.unlink(missing_ok=True)
    
    # Remove coverage files
    for path in pathlib.Path('.').glob('.coverage*'):
        path.unlink(missing_ok=True)
        print(f'Removed coverage file: {path}')
    
    print('Cleanup completed.')
    "

# Development environment (installs all dependencies)
[testenv:dev]
deps = 
    {[testenv]deps}
    -e.[dev,docs,benchmark]
    
commands = 
    python -c "
    print('Development environment ready!')
    print('Available commands:')
    print('  pytest tests/')
    print('  black src/ tests/')
    print('  mypy src/')
    print('  flake8 src/ tests/')
    print('  sphinx-build docs/ docs/_build/html')
    "

# GPU testing environment (requires CUDA)
[testenv:gpu]
deps = 
    {[testenv]deps}
    torch>=2.1.0
    
setenv = 
    {[testenv]setenv}
    CUDA_VISIBLE_DEVICES = 0
    
commands = 
    python -c "import torch; assert torch.cuda.is_available(), 'CUDA not available'"
    pytest {toxinidir}/tests -v \
        -m "gpu or cuda" \
        --timeout=600 \
        {posargs}

# Compatibility testing (minimal dependencies)
[testenv:minimal]
deps = 
    pytest>=7.0.0
    torch>=2.0.0
    transformers>=4.30.0
    
commands = 
    pytest {toxinidir}/tests -v \
        -m "not slow and not integration and not gpu" \
        --maxfail=5 \
        {posargs}

# Configuration for pytest
[pytest]
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
addopts = 
    -ra
    --strict-markers
    --strict-config
    --tb=short
markers = 
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    e2e: marks tests as end-to-end tests
    privacy: marks tests as privacy-related
    federated: marks tests as federated learning tests
    gpu: marks tests as requiring GPU
    cuda: marks tests as requiring CUDA
    benchmark: marks tests as performance benchmarks
    security: marks tests as security-related
    unit: marks tests as unit tests
    differential_privacy: marks tests as differential privacy specific
    distributed: marks tests as distributed computing related
    performance: marks tests as performance related

# Flake8 configuration
[flake8]
max-line-length = 88
extend-ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
per-file-ignores = 
    __init__.py:F401
    tests/*:D,S101
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv

# Coverage configuration reference
[coverage:run]
source = src/
branch = True
parallel = True