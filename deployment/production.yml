# Production Deployment Configuration for DP-Federated LoRA
# Global-first implementation with multi-region support

version: '3.8'

services:
  # Main Federated Learning Server
  dp-federated-server:
    image: dp-federated-lora:latest
    container_name: dp-federated-server
    ports:
      - "8443:8443"  # HTTPS for production
      - "8080:8080"  # HTTP fallback
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8443
      - PRIVACY_EPSILON=8.0
      - PRIVACY_DELTA=1e-5
      - MAX_CLIENTS=100
      - MIN_CLIENTS=5
      - ROUNDS=50
      - MODEL_NAME=meta-llama/Llama-2-7b-hf
      - SECRET_KEY=${FEDERATED_SECRET_KEY}
      - SSL_ENABLED=true
      - SSL_CERT_PATH=/certs/server.crt
      - SSL_KEY_PATH=/certs/server.key
      # Performance optimizations
      - CACHE_SIZE=2000
      - MAX_CONNECTIONS=200
      - ENABLE_PROFILING=true
      - PARALLEL_AGGREGATION=true
      - CONCURRENT_WORKERS=8
    volumes:
      - ./certs:/certs:ro
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    
  # Load Balancer (for multi-server deployment)
  load-balancer:
    image: nginx:alpine
    container_name: federated-lb
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - dp-federated-server
    networks:
      - federated-network
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: federated-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - federated-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: federated-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - federated-network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: federated-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - federated-network
    restart: unless-stopped

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: federated-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=federated_lora
      - POSTGRES_USER=federated
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - federated-network
    restart: unless-stopped

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: federated-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - federated-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: federated-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - federated-network
    restart: unless-stopped

  # Model registry and storage
  minio:
    image: minio/minio:latest
    container_name: federated-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - federated-network
    restart: unless-stopped

networks:
  federated-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
  grafana-data:
  redis-data:
  postgres-data:
  elasticsearch-data:
  minio-data: