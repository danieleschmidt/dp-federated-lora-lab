# Kubernetes deployment configuration for dp-federated-lora-lab
# Production-ready deployment with privacy and security considerations

apiVersion: v1
kind: Namespace
metadata:
  name: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/version: "1.0"
    privacy-level: "high"
    security-level: "high"

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: dp-federated-lora-config
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: configuration
data:
  # Application configuration
  APP_ENV: "production"
  LOG_LEVEL: "INFO"
  PYTHONPATH: "/app/src"
  
  # Privacy configuration
  PRIVACY_BUDGET_EPSILON: "1.0"
  PRIVACY_BUDGET_DELTA: "1e-5"
  PRIVACY_ACCOUNTANT: "rdp"
  
  # Federated learning configuration
  FEDERATED_ROUNDS: "100"
  MIN_CLIENTS: "10"
  MAX_CLIENTS: "100"
  CLIENT_SELECTION_STRATEGY: "random"
  
  # Model configuration
  MODEL_NAME: "microsoft/DialoGPT-medium"
  MAX_SEQUENCE_LENGTH: "512"
  BATCH_SIZE: "8"
  LEARNING_RATE: "5e-5"
  
  # LoRA configuration
  LORA_RANK: "16"
  LORA_ALPHA: "32"
  LORA_DROPOUT: "0.1"
  
  # Monitoring configuration
  METRICS_ENABLED: "true"
  METRICS_PORT: "8001"
  HEALTH_CHECK_PORT: "8080"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: dp-federated-lora-secrets
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  WANDB_API_KEY: ""  # echo -n "your-wandb-key" | base64
  HUGGINGFACE_TOKEN: ""  # echo -n "your-hf-token" | base64
  POSTGRES_PASSWORD: "ZHBwYXNzd29yZA=="  # dppassword
  REDIS_PASSWORD: ""
  
  # Privacy keys (if using cryptographic privacy)
  PRIVACY_ENCRYPTION_KEY: ""
  PRIVACY_SIGNING_KEY: ""

---
# Persistent Volume for data storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: dp-federated-lora-data-pv
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: storage
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: fast-ssd
  hostPath:
    path: /data/dp-federated-lora
    type: DirectoryOrCreate

---
# Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dp-federated-lora-data-pvc
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
# Main application deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dp-federated-lora-app
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: application
    app.kubernetes.io/version: "1.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: dp-federated-lora
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dp-federated-lora
        app.kubernetes.io/component: application
        app.kubernetes.io/version: "1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Service account
      serviceAccountName: dp-federated-lora-sa
      
      # Node affinity for GPU nodes
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: accelerator
                operator: In
                values: ["nvidia-tesla-v100", "nvidia-tesla-t4", "nvidia-a100"]
        
        # Pod anti-affinity for better distribution
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values: ["dp-federated-lora"]
              topologyKey: kubernetes.io/hostname
      
      # Tolerations for GPU nodes
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      
      containers:
      - name: dp-federated-lora
        image: ghcr.io/yourusername/dp-federated-lora:latest
        imagePullPolicy: IfNotPresent
        
        # Security context for container  
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        
        # Ports
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 8001
          protocol: TCP
        - name: health
          containerPort: 8080
          protocol: TCP
        
        # Environment variables
        envFrom:
        - configMapRef:
            name: dp-federated-lora-config
        - secretRef:
            name: dp-federated-lora-secrets
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Resource limits and requests
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
            nvidia.com/gpu: "0"  # Set to 1 if GPU required
          limits:
            cpu: "8"
            memory: "16Gi"
            nvidia.com/gpu: "1"  # Set to 1 if GPU required
        
        # Volume mounts
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: models-volume
          mountPath: /app/models
        - name: outputs-volume
          mountPath: /app/outputs
        - name: logs-volume
          mountPath: /app/logs
        - name: tmp-volume
          mountPath: /tmp
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe for slow-starting applications
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - "sleep 15"  # Graceful shutdown delay
      
      # Volumes
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: dp-federated-lora-data-pvc
      - name: models-volume
        emptyDir:
          sizeLimit: 20Gi
      - name: outputs-volume
        emptyDir:
          sizeLimit: 10Gi
      - name: logs-volume
        emptyDir:
          sizeLimit: 5Gi
      - name: tmp-volume
        emptyDir:
          sizeLimit: 2Gi
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
      
      # Restart policy
      restartPolicy: Always

---
# Service for the application
apiVersion: v1
kind: Service
metadata:
  name: dp-federated-lora-service
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 8001
    targetPort: metrics
    protocol: TCP
  - name: health
    port: 8080
    targetPort: health
    protocol: TCP
  selector:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: application

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dp-federated-lora-hpa
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: dp-federated-lora-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: dp-federated-lora-pdb
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: disruption-budget
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dp-federated-lora
      app.kubernetes.io/component: application

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dp-federated-lora-sa
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: service-account
automountServiceAccountToken: false

---
# Role for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dp-federated-lora-role
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# Role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dp-federated-lora-rolebinding
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: dp-federated-lora-sa
  namespace: dp-federated-lora
roleRef:
  kind: Role
  name: dp-federated-lora-role
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dp-federated-lora-netpol
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: network-policy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: dp-federated-lora
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8001  # Metrics port
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000  # Application port
  egress:
  - to: []  # Allow all egress (customize as needed)
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 80   # HTTP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dp-federated-lora-ingress
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'";
spec:
  tls:
  - hosts:
    - dp-federated-lora.example.com
    secretName: dp-federated-lora-tls
  rules:
  - host: dp-federated-lora.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dp-federated-lora-service
            port:
              number: 8000

---
# Job for database initialization
apiVersion: batch/v1
kind: Job
metadata:
  name: dp-federated-lora-init
  namespace: dp-federated-lora
  labels:
    app.kubernetes.io/name: dp-federated-lora
    app.kubernetes.io/component: initialization
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dp-federated-lora
        app.kubernetes.io/component: initialization
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: init-container
        image: ghcr.io/yourusername/dp-federated-lora:latest
        command: ["python", "-m", "dp_federated_lora.init"]
        envFrom:
        - configMapRef:
            name: dp-federated-lora-config
        - secretRef:
            name: dp-federated-lora-secrets
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1"
            memory: "2Gi"
      backoffLimit: 3